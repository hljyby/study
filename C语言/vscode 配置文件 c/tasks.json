{
    "version": "2.0.0",
    "command": "gcc",
    "args": [
        "-g",
        "${file}",
        "-o",
        "${fileBasenameNoExtension}.exe"
    ],
    "tasks": [
        {
            "type": "shell",
            "label": "gcc",
            "command": "E:\\mingw64\\bin\\gcc.exe",
            "args": [
                "-g",
                "${file}",
                "-o",
                "${fileDirname}\\${fileBasenameNoExtension}.exe"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            }
        }
    ]
}

// {
//     "version": "2.0.0",
//     "tasks": [
//         {
//             "label": "Compile", // 任务名称，与launch.json的preLaunchTask相对应
//             "command": "clang", // 要使用的编译器，C++用clang++
//             "args": [
//                 "${file}",
//                 "-o", // 指定输出文件名，不加该参数则默认输出a.exe，Linux下默认a.out
//                 "${fileDirname}/${fileBasenameNoExtension}.exe",
//                 "-g", // 生成和调试有关的信息
//                 "-Wall", // 开启额外警告
//                 "-static-libgcc", // 静态链接libgcc
//                 "--target=x86_64-w64-mingw", // clang的默认target为msvc，不加这一条就会找不到头文件；Linux下去掉这一条
//                 "-std=c11" // C++最新标准为c++17，或根据自己的需要进行修改
//             ], // 编译命令参数
//             "type": "shell", // 可以为shell或process，前者相当于先打开shell再输入命令，后者是直接运行命令
//             "group": {
//                 "kind": "build",
//                 "isDefault": true // 设为false可做到一个tasks.json配置多个编译指令，需要自己修改本文件，我这里不多提
//             },
//             "presentation": {
//                 "echo": true,
//                 "reveal": "always", // 在“终端”中显示编译信息的策略，可以为always，silent，never。具体参见VSC的文档
//                 "focus": false, // 设为true后可以使执行task时焦点聚集在终端，但对编译c和c++来说，设为true没有意义
//                 "panel": "shared" // 不同的文件的编译信息共享一个终端面板
//             }
//             // "problemMatcher":"$gcc" // 如果你不使用clang，去掉前面的注释符，并在上一条之后加个逗号。照着我的教程做的不需要改（也可以把这行删去)
//         }
//     ]
// }